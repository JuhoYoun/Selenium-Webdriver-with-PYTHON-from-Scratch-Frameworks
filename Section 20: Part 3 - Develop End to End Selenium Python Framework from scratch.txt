강의에서 셀레니움이 최근데 업데이트한 부분이 있다고 하며 소개를 한다 이전 강의에서는 decprecated 되는 부분들을 모두 최신으로 바꿔서 강의해서 걱정 하지 않아도 된다 
이후 강의 코드에서는 decrecated 된 부분이 있는데 읽고 이해하는데 문제가 없으니 그냥 진행하도록하겠다

Selenium Python Framework Implementation from Scratch:
- Standards of writing selenium tests in framework
- Creating Browser invocation Fixtures in conftest.py
- Setting up Base Class to hold all common Utilities
- Inheriting Base class to all tests to remove Fixture rebundant code
- Passing Command Line options to select browser at run time
- Implementing Page Object mechanism
- Smarter way of returning Page objects from navigation methods
- Creating Selenium WebDriver Custom Utilities in Base Class
- Parameterizing Webdriver tests with multiple data sets
- Organizing Data from separate data files and injecting into fixture at run time
- Implementing logging feature to wedriver tests
- Text Execution html reporting
- Automatic screenshot capture on test failures
- Integrating selenium python framework to Jenkins CI tool with Jenkin build parameteriztion

일단 시작하기 앞서 강의에서는 파이썬 프로젝트 폴더를 만들고(PythonSelfFramework) 그 안에 패키지 폴더(tests)를 만들었다 



How to generalize browser invocation code
The browser invocation code should not be in your test cases. It should come from another resuable file
The best place to put this is a part of fixture. The best file is conftest.py. 


다음의 코드를 보자
conftest.py

@pytest.fixture(scope="class")
def setup(request):
    driver = webdriver.Chrome(executable_path="C:\\chromedriver.exe")
    driver.get("https://rahulshettyacademy.com/angularpractice/")
    driver.maximize_window()
    return driver

test_e2e.py

@pytest.mark.usefixtures("setup")
class TestOne():

    def test_e2e(self, setup):
        setup.find_element_by_css_selector("a[href*='shop']").click()
        ~~~~~ 이후의 코드는 중요하지 않음 

여기서 setup fixture에서 driver를 셋업한 후 def test_e2e(self, setup): 이런 방식으로 driver 객체를 넘겨줬다 근데 여기에는 한가지 흠이 있다
browser를 열였으니 

@pytest.fixture(scope="class")
def setup(request):
    driver = webdriver.Chrome(executable_path="C:\\chromedriver.exe")
    driver.get("https://rahulshettyacademy.com/angularpractice/")
    driver.maximize_window()
    
    yield
    driver.close()
    return driver

이렇게 테스트가 끝나고 브라우저를 닫게 yield 밑에 driver.close() 이렇게 써줘야되고 return driver 를 yield 뒤에 넣으면 driver 객체를 테스트 시작할 때 넘겨줄 수 없다 
또 return driver 를 yield 앞에 넣어버리면 yield 전에 return 으로 해당 fixture가 끝나버리므로 브라우저를 닫을 수 없을거 같다 강의에서는 이 return이 yield 앞에 오는 경우
it will not work 이렇게만 이야기 한다 

request는 fixture를 선언할 때 디폴트로 딸려오는 instance이다 
위의 문제를 해결하기 위해 한줄이면 충분하다 

@pytest.fixture(scope="class")
def setup(request):
    driver = webdriver.Chrome(executable_path="C:\\chromedriver.exe")
    driver.get("https://rahulshettyacademy.com/angularpractice/")
    driver.maximize_window()
    request.cls.driver = driver
    
    yield
    driver.close()


request.cls.driver = driver  이 의미는 이 fixture를 쓰는 클래스의 driver 변수는 fixture에서 선언한 driver와 같다는 의미이다

그리고 클래스 테스트 내에서 쓸 때는 이렇게 써줘야한다
@pytest.mark.usefixtures("setup")
class TestOne():

    def test_e2e(self):
        self.driver.find_element_by_css_selector("a[href*='shop']").click()
        ~~~~~ 이후의 코드는 중요하지 않음 

request.cls.driver = driver  이 동작으로 TestOne 클래스 변수로 driver가 생기기 때문에 self.driver 로 써야한다

이번엔 이 부분을 보자
@pytest.mark.usefixtures("setup")
class TestOne(BaseClass):

클래스에 fixture를 적용할 때 클래스 위에다 항상 @pytest.mark.usefixtures("setup") 이렇게 써준다면 100개의 테스트 클래스가 있으면 100번 써줘야한다 
utilities 라는 패키지를 만들고 그곳에 BaseClass.py 파일을 만들어 BaseClass를 만들자

@pytest.mark.usefixtures("setup")
class BaseClass:
    pass 

이렇게 하면 이 클래스는 fixture가 붙어있고 이 클래스를 상속받는 모든 테스트 클래스들은 자동으로 setup fixture 까지 상속받게된다
class TestOne(BaseClass):   이렇게 상속해주면 된다



Passing command line options to select browser at run time
command line 옵션으로 browser 이름을 넘겨 그 browser에 맞게 셋업을 하려고 한다
py.test --browser_name chrome 
이렇게 입력하면 크롬 브라우저를 열게 코드를 짜려고 한다 그러기 위해선 우선 pytest에게 command line argument를 선언할 거라는걸 알려줘야한다 
-> https://docs.pytest.org/en/7.1.x/example/simple.html  
위를 보면 command line option을 넘기는 syntax를 알려준다
공식 문서의 이 부분을 보자
For this to work we need to add a command line option and provide the cmdopt through a fixture function:

# content of conftest.py
import pytest


def pytest_addoption(parser):
    parser.addoption(
        "--cmdopt", action="store", default="type1", help="my option: type1 or type2"
    )


@pytest.fixture
def cmdopt(request):
    return request.config.getoption("--cmdopt")


-> it is a hook for adding a command line options
--cmdopt 이건 키 밸류 이 경우엔 browser_name이다 action="store" 이 부분은 이 옵션값을 browser_name 변수에다 저장한다는 의미다 default="type1" 이 부분은
옵션값을 넘기지 않았을 때 cmdopt 즉 여기선 browser_name의 디폴트 값이다 help="my option: type1 or type2" 이 부분은 이 키 밸류가 뭘 하는지에 대한 설명이고 이 부분은 optional 이다

def pytest_addoption(parser):
    parser.addoption(
        "--browser_name", action="store", default="chrome"
    )

이 hook을 conftest.py 에 추가해주면 된다 자 그럼 fixture에서 이 키 밸류를 어떻게 받아서 쓸까?
->
@pytest.fixture(scope="class")
def setup(request):
    browser_name=request.config.getoption("browser_name")

이런식으로 받아 쓰면 된다 


What is page object design pattern and its importance?
This is one of the common design pattern used across all automation frameworks. No matter if itls python, java or javascript, when you develop a UI automation framework, page object mechanism will be definitely implemented because of the advantages it gives to us.
웹사이트에서 한 페이지에 있는 객체? 엘리먼트? 에대한 테스트는 그 페이지에 대한 하나의 클래스에 몰아놓는다 만약 한 페이지에서 어떤 것을 클릭해서 다른 페이지로 간다면 그 페이지에 대한 클래스를 또 만든다
이를 위해 pageObjects 패키지를 따로 만들어줬다 이 패키지 안에 HomePage.py, CheckoutPage.py, ConfirmPage.py 등의 클래스 파일들을 만들어줬다 이제 테스트 파일들 안에서 페이지 객체들에
대한 코드를 가지지 않고 이 클래스 파일들에서 불러오게 할것이다 

class variable vs instance variable 
-> https://www.atatus.com/blog/class-variables-vs-instance-variables-in-java/#:~:text=Class%20variables%20are%20defined%20within,class%20methods%2C%20typically%20the%20constructor.&text=Changes%20made%20to%20the%20class,does%20not%20affect%20all%20instances.
클래스 내에서 instance variable은 self.shop 이런식으로 쓰는데 class variable은 class_name.shop 이런식으로 쓴다 
In Python, a class variable is a variable that is defined within a class and outside of any class method. It is a variable that is shared by all instances of the class, meaning that if the variable's value is changed, the change will be reflected in all instances of the class. Class variables help store data common to all instances of a class.
A class in which the value of the variable vary from object to object is known as instance variables. An instance variable, in object-oriented programming, is a variable that is associated with an instance or object of a class.

It holds data or state that is specific to that instance and can be accessed or modified through the instance's methods. Instance variables are typically declared within the class definition and can have different values for different instances of the same class.

class HomePage:

    def __init__(self, driver):
        self.driver = driver   # instance variable은 이런식으로 self. 을 쓰고 constructor로 선언했다 

    shop = (By.CSS_SELECTOR, "a[href*='shop']") # 이 아래것들은 모두 class variable이다 
    name = (By.CSS_SELECTOR, "[name='name']")
    email = (By.NAME, "email")
    check = (By.ID, "exampleCheck1")
    gender= (By.ID, "exampleFormControlSelect1")
    submit = (By.XPATH, "//input[@value='Submit']")
    successMessage = (By.CSS_SELECTOR, "[class*='alert-success']")

    def shopItems(self):
            return self.driver.find_element(*HomePage.shop)  # class variable 이라서 HomePage.shop 이렇게 써야한다 앞에 *를 붙인 이유는 *를 붙이면 tuple에 ()가 없어진다




Smart way of optimizing page objects by removing objects creation in tests


class HomePage:

    def __init__(self, driver):
        self.driver = driver  

    shop = (By.CSS_SELECTOR, "a[href*='shop']") 

    def shopItems(self):
        return self.driver.find_element(*HomePage.shop)


class TestOne(BaseClass):

    def test_e2e(self):
        homePage = HomePage(self.driver)
        homePage.shopItems().click()
        checkoutpage = CheckOutPage(self.driver)
        cards = checkoutpage.getCardTitles()

여길 보면 homePage 객체도 생성하고 CheckOutPage 객체도 따로 생성한다 이 부분을 optimize 해보자  homePage.shopItems().click() 이건 shopitem button이 잘 작동하나
테스트하는 라인인데 사실 그 버튼을 누르게 되면 CheckOutPage 로 가게 된다 즉 여기가 HomePage와 CheckOutPage의 integration point이다 
위의 두 클래스 코드를 아래와 같이 optimize할 수 있다

class HomePage:

    def __init__(self, driver):
        self.driver = driver  

    shop = (By.CSS_SELECTOR, "a[href*='shop']") 

    def shopItems(self):
        self.driver.find_element(*HomePage.shop).click()
        checkOutPage = CheckOutPage(self.driver)
        return checkOutPage


class TestOne(BaseClass):

    def test_e2e(self):
        homePage = HomePage(self.driver)
        checkoutpage = homePage.shopItems()
        cards = checkoutpage.getCardTitles()

이렇게 바꿀 수 있다  checkOutPage와 confirmPage도 비슷한식으로 연결하면 된다


Creating Custom Utilities in Selenium Pytest Framework




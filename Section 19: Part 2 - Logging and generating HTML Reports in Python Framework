Levels of Logs

DEBUG
INFO
WARNING - 에러는 아니지만 경고 
ERROR - 에러
CRITICAL - 전체 framework를 멈춰버릴만큼 큰 문제

#######
import logging


def test_loggingDemo():
    logger = logging.getLogger(__name__)

    fileHandler = logging.FileHandler('logfile.log')
    formatter = logging.Formatter("%(asctime)s :%(levelname)s : %(name)s :%(message)s")
    fileHandler.setFormatter(formatter)

    logger.addHandler(fileHandler)  #filehandler object

    logger.setLevel(logging.CRITICAL)
    logger.debug("A debug statement is executed")
    logger.info("Information statement")
    logger.debug("A debug statement is executed")
    logger.warning("Something is in warning mode")
    logger.error("A Major error has happend")
    logger.critical("Critical issue")

###############

import logging -> 파이썬 설치할 때 기본적으로 같이 설치되는 패키지이다

log의 포멧이 예를들어 
2019-2-16 12:01:01, 798 (datetime) : ERROR (Log Level) : <testcase name> : message

이 정도 된다면 여기서 testcase name에 들어가는 파일명 이름을 위해
logger = logging.getLogger(__name__)  이 라인이 필요하다 만약 이렇게 __name__을 안넣으면 디폴트로 route로 들어간다는데 뭔 말인지 모르겠다

logging의 FileHandler 객체는 어떤 파일에 로그를 남길건지를 정하고 FileHandler를 addHandler에 넘긴다

%(asctime)s :%(levelname)s : %(name)s :%(message)s   여길 보자 asctime는 로그가 남겨질 때 즉 run 타임 때의 시간 levelname는 레벨 name는 파일 이름 message는 메세지이다 뒤의
s는 이것들을 스트링으로 다룬다는 뜻이다 

    logger.setLevel(logging.INFO)
    logger.debug("A debug statement is executed")
    logger.info("Information statement")
    logger.debug("A debug statement is executed")
    logger.warning("Something is in warning mode")
    logger.error("A Major error has happend")
    logger.critical("Critical issue")

이 부분을 보면 맨 위에 레벨을 INFO로 설정했다 이렇게 하면 logger.debug("A debug statement is executed") 이렇게 debug로 되있는 로그는 기록되지 않는다 

DEBUG
INFO
WARNING
ERROR
CRITICAL

이게 logger level의 hierarchy 인데 아래로 갈수록 정도가? 쎄다 그래서 INFO로 레벨을 설정했을 때 info와 같거나 그 보다 레벨이 쎈 로그들만 기록된 것이다
이렇게 하면 코드 초반에 레벨을 설정해 내가 보고싶은 레벨들만 기로할 수 있다


